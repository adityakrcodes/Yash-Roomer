{"ast":null,"code":"export const checkSession=admin=>{const url=\"/api/users/check-session\";fetch(url).then(res=>{if(res.status===200){return res.json();}}).then(json=>{if(json&&json.currentUser){admin.setState({userName:json.currentUser,userId:json.currentUserId});}}).catch(error=>{console.log(error);});};export const getPosts=postList=>{// the URL for the request\nconst url=\"/api/posts\";// Since this is a GET request, simply call fetch on the URL\nfetch(url).then(res=>{if(res.status===200){// return a promise that resolves with the JSON body\n// console.log(res.json())\nreturn res.json();}else{console.log('unable to get posts');}}).then(json=>{// the resolved promise with the JSON body\nfor(let i=0;i<json.length;i++){const user_url=\"/api/users/\"+json[i][\"creator\"];fetch(user_url).then(resq=>{if(resq.status===200){return resq.json();}else{console.log('unable to get users');}}).then(json_user=>{json[i][\"creator_name\"]=json_user.firstName+\" \"+json_user.lastName;json[i][\"creator_image_url\"]=json_user.image_url;postList.setState({posts:json});}).catch(error=>{console.log(error);});}postList.setState({posts:json});}).catch(error=>{console.log(error);});};export const getUsers=userList=>{const url=\"/api/users\";fetch(url).then(res=>{if(res.status===200){return res.json();}}).then(json=>{if(json){userList.setState({users:json});}}).catch(error=>{console.log(error);});};export const deleteUser=(id,updateInfo)=>{// the URL for the request\nconst url=\"/api/users/\"+id;// Create our request constructor with all the parameters we need\nconst request=new Request(url,{method:\"delete\",headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});// Send the request with fetch()\nfetch(request).then(function(res){// Handle response we get from the API.\n// Usually check the error codes to see what happened.\nif(res.status===200){// If student was added successfully, tell the user.\nconsole.log('deleted sucessfully');updateInfo();}else{// If server couldn't add the student, tell the user.\n// Here we are adding a generic message, but you could be more specific in your app.\nconsole.log('error loading');}}).catch(error=>{console.log(error);});};","map":{"version":3,"names":["checkSession","admin","url","fetch","then","res","status","json","currentUser","setState","userName","userId","currentUserId","catch","error","console","log","getPosts","postList","i","length","user_url","resq","json_user","firstName","lastName","image_url","posts","getUsers","userList","users","deleteUser","id","updateInfo","request","Request","method","headers","Accept"],"sources":["D:/Projects/Roomer/client/src/actions/admin.js"],"sourcesContent":["export const checkSession = (admin) => {\n    const url = \"/api/users/check-session\";\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser) {\n                admin.setState({ userName: json.currentUser, userId: json.currentUserId});\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const getPosts = (postList) => {\n    // the URL for the request\n    const url = \"/api/posts\";\n\n    // Since this is a GET request, simply call fetch on the URL\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                // return a promise that resolves with the JSON body\n                // console.log(res.json())\n                return res.json();\n            } else {\n                console.log('unable to get posts')\n            }\n        })\n        .then(json => {\n            // the resolved promise with the JSON body\n            for (let i = 0; i < json.length; i++){\n                const user_url = \"/api/users/\" + json[i][\"creator\"]\n\n                fetch(user_url).then(resq => {\n                    if (resq.status === 200){\n                        return resq.json();\n                    }\n                    else{\n                        console.log('unable to get users')\n                    }\n                }).then(json_user => {\n                    json[i][\"creator_name\"] = json_user.firstName + \" \" + json_user.lastName;\n                    json[i][\"creator_image_url\"] = json_user.image_url;\n                    postList.setState({ posts: json });\n                    \n                }).catch(error =>{\n                    console.log(error)\n                })\n            }\n            postList.setState({ posts: json });\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const getUsers= (userList) => {\n    const url = \"/api/users\";\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json) {\n                userList.setState({ users: json });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n\nexport const deleteUser = (id, updateInfo) => {\n    // the URL for the request\n    const url = \"/api/users/\" + id;\n\n\n    // Create our request constructor with all the parameters we need\n    const request = new Request(url, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    // Send the request with fetch()\n    fetch(request)\n        .then(function (res) {\n            // Handle response we get from the API.\n            // Usually check the error codes to see what happened.\n            if (res.status === 200) {\n                // If student was added successfully, tell the user.\n                console.log('deleted sucessfully')\n                updateInfo();\n            } else {\n                // If server couldn't add the student, tell the user.\n                // Here we are adding a generic message, but you could be more specific in your app.\n                console.log('error loading')\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}