{"ast":null,"code":"export const checkSession = admin => {\n  const url = \"/api/users/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentUser) {\n      admin.setState({\n        userName: json.currentUser,\n        userId: json.currentUserId\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const getPosts = postList => {\n  // the URL for the request\n  const url = \"/api/posts\";\n\n  // Since this is a GET request, simply call fetch on the URL\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      // return a promise that resolves with the JSON body\n      // console.log(res.json())\n      return res.json();\n    } else {\n      console.log('unable to get posts');\n    }\n  }).then(json => {\n    // the resolved promise with the JSON body\n    for (let i = 0; i < json.length; i++) {\n      const user_url = \"/api/users/\" + json[i][\"creator\"];\n      fetch(user_url).then(resq => {\n        if (resq.status === 200) {\n          return resq.json();\n        } else {\n          console.log('unable to get users');\n        }\n      }).then(json_user => {\n        json[i][\"creator_name\"] = json_user.firstName + \" \" + json_user.lastName;\n        json[i][\"creator_image_url\"] = json_user.image_url;\n        postList.setState({\n          posts: json\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n    postList.setState({\n      posts: json\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const getUsers = userList => {\n  const url = \"/api/users\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json) {\n      userList.setState({\n        users: json\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const deleteUser = (id, updateInfo) => {\n  // the URL for the request\n  const url = \"/api/users/\" + id;\n\n  // Create our request constructor with all the parameters we need\n  const request = new Request(url, {\n    method: \"delete\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  // Send the request with fetch()\n  fetch(request).then(function (res) {\n    // Handle response we get from the API.\n    // Usually check the error codes to see what happened.\n    if (res.status === 200) {\n      // If student was added successfully, tell the user.\n      console.log('deleted sucessfully');\n      updateInfo();\n    } else {\n      // If server couldn't add the student, tell the user.\n      // Here we are adding a generic message, but you could be more specific in your app.\n      console.log('error loading');\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"names":["checkSession","admin","url","fetch","then","res","status","json","currentUser","setState","userName","userId","currentUserId","catch","error","console","log","getPosts","postList","i","length","user_url","resq","json_user","firstName","lastName","image_url","posts","getUsers","userList","users","deleteUser","id","updateInfo","request","Request","method","headers","Accept"],"sources":["C:/Users/HP/OneDrive/Desktop/Amigo-main/Amigo-main/client/src/actions/admin.js"],"sourcesContent":["export const checkSession = (admin) => {\n    const url = \"/api/users/check-session\";\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser) {\n                admin.setState({ userName: json.currentUser, userId: json.currentUserId});\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const getPosts = (postList) => {\n    // the URL for the request\n    const url = \"/api/posts\";\n\n    // Since this is a GET request, simply call fetch on the URL\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                // return a promise that resolves with the JSON body\n                // console.log(res.json())\n                return res.json();\n            } else {\n                console.log('unable to get posts')\n            }\n        })\n        .then(json => {\n            // the resolved promise with the JSON body\n            for (let i = 0; i < json.length; i++){\n                const user_url = \"/api/users/\" + json[i][\"creator\"]\n\n                fetch(user_url).then(resq => {\n                    if (resq.status === 200){\n                        return resq.json();\n                    }\n                    else{\n                        console.log('unable to get users')\n                    }\n                }).then(json_user => {\n                    json[i][\"creator_name\"] = json_user.firstName + \" \" + json_user.lastName;\n                    json[i][\"creator_image_url\"] = json_user.image_url;\n                    postList.setState({ posts: json });\n                    \n                }).catch(error =>{\n                    console.log(error)\n                })\n            }\n            postList.setState({ posts: json });\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\nexport const getUsers= (userList) => {\n    const url = \"/api/users\";\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json) {\n                userList.setState({ users: json });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n\nexport const deleteUser = (id, updateInfo) => {\n    // the URL for the request\n    const url = \"/api/users/\" + id;\n\n\n    // Create our request constructor with all the parameters we need\n    const request = new Request(url, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    // Send the request with fetch()\n    fetch(request)\n        .then(function (res) {\n            // Handle response we get from the API.\n            // Usually check the error codes to see what happened.\n            if (res.status === 200) {\n                // If student was added successfully, tell the user.\n                console.log('deleted sucessfully')\n                updateInfo();\n            } else {\n                // If server couldn't add the student, tell the user.\n                // Here we are adding a generic message, but you could be more specific in your app.\n                console.log('error loading')\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}